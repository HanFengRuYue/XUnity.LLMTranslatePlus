#pragma checksum "D:\Document\Git\XUnity.LLMTranslatePlus\XUnity-LLMTranslatePlus\Views\LogPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "33F4206047C016E9F00258D1FA90195E6692DEA783366FC277C9B20D185E7B32"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XUnity_LLMTranslatePlus.Views
{
    partial class LogPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2509")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2509")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class LogPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ILogPage_Bindings
        {
            private global::XUnity_LLMTranslatePlus.Views.LogPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.ListView obj8;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj8ItemsSourceDisabled = false;

            private LogPage_obj1_BindingsTracking bindingsTracking;

            public LogPage_obj1_Bindings()
            {
                this.bindingsTracking = new LogPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 156 && columnNumber == 31)
                {
                    isobj8ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8: // Views\LogPage.xaml line 154
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2509")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ILogPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::XUnity_LLMTranslatePlus.Views.LogPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::XUnity_LLMTranslatePlus.Views.LogPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LogEntries(obj.LogEntries, phase);
                    }
                }
            }
            private void Update_LogEntries(global::System.Collections.ObjectModel.ObservableCollection<global::XUnity_LLMTranslatePlus.Views.LogPage.LogEntryDisplay> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_LogEntries(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\LogPage.xaml line 154
                    if (!isobj8ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj8, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2509")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class LogPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<LogPage_obj1_Bindings> weakRefToBindingObj; 

                public LogPage_obj1_BindingsTracking(LogPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<LogPage_obj1_Bindings>(obj);
                }

                public LogPage_obj1_Bindings TryGetBindingObject()
                {
                    LogPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_LogEntries(null);
                }

                public void PropertyChanged_LogEntries(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    LogPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::XUnity_LLMTranslatePlus.Views.LogPage.LogEntryDisplay> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::XUnity_LLMTranslatePlus.Views.LogPage.LogEntryDisplay>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_LogEntries(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    LogPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::XUnity_LLMTranslatePlus.Views.LogPage.LogEntryDisplay> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::XUnity_LLMTranslatePlus.Views.LogPage.LogEntryDisplay>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::XUnity_LLMTranslatePlus.Views.LogPage.LogEntryDisplay> cache_LogEntries = null;
                public void UpdateChildListeners_LogEntries(global::System.Collections.ObjectModel.ObservableCollection<global::XUnity_LLMTranslatePlus.Views.LogPage.LogEntryDisplay> obj)
                {
                    if (obj != cache_LogEntries)
                    {
                        if (cache_LogEntries != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_LogEntries).PropertyChanged -= PropertyChanged_LogEntries;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_LogEntries).CollectionChanged -= CollectionChanged_LogEntries;
                            cache_LogEntries = null;
                        }
                        if (obj != null)
                        {
                            cache_LogEntries = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_LogEntries;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_LogEntries;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2509")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\LogPage.xaml line 216
                {
                    global::Microsoft.UI.Xaml.Controls.Button element2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element2).Click += this.ClearLogButton_Click;
                }
                break;
            case 3: // Views\LogPage.xaml line 223
                {
                    global::Microsoft.UI.Xaml.Controls.Button element3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element3).Click += this.ExportLogButton_Click;
                }
                break;
            case 4: // Views\LogPage.xaml line 230
                {
                    this.PauseResumeButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.PauseResumeButton).Click += this.PauseResumeButton_Click;
                }
                break;
            case 5: // Views\LogPage.xaml line 233
                {
                    this.PauseResumeIcon = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                }
                break;
            case 6: // Views\LogPage.xaml line 234
                {
                    this.PauseResumeText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 7: // Views\LogPage.xaml line 151
                {
                    this.LogScrollViewer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ScrollViewer>(target);
                }
                break;
            case 8: // Views\LogPage.xaml line 154
                {
                    this.LogListView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                }
                break;
            case 10: // Views\LogPage.xaml line 117
                {
                    this.InfoCheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.InfoCheckBox).Checked += this.LogFilterChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.InfoCheckBox).Unchecked += this.LogFilterChanged;
                }
                break;
            case 11: // Views\LogPage.xaml line 121
                {
                    this.WarningCheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.WarningCheckBox).Checked += this.LogFilterChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.WarningCheckBox).Unchecked += this.LogFilterChanged;
                }
                break;
            case 12: // Views\LogPage.xaml line 125
                {
                    this.ErrorCheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.ErrorCheckBox).Checked += this.LogFilterChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.ErrorCheckBox).Unchecked += this.LogFilterChanged;
                }
                break;
            case 13: // Views\LogPage.xaml line 129
                {
                    this.DebugCheckBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.CheckBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.DebugCheckBox).Checked += this.LogFilterChanged;
                    ((global::Microsoft.UI.Xaml.Controls.CheckBox)this.DebugCheckBox).Unchecked += this.LogFilterChanged;
                }
                break;
            case 14: // Views\LogPage.xaml line 138
                {
                    this.AutoScrollToggle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleSwitch>(target);
                }
                break;
            case 15: // Views\LogPage.xaml line 96
                {
                    this.QueueCountText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 16: // Views\LogPage.xaml line 80
                {
                    this.FailureCountText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 17: // Views\LogPage.xaml line 64
                {
                    this.SuccessCountText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 18: // Views\LogPage.xaml line 44
                {
                    this.StatusIndicator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Shapes.Ellipse>(target);
                }
                break;
            case 19: // Views\LogPage.xaml line 48
                {
                    this.LogStatusText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2509")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\LogPage.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    LogPage_obj1_Bindings bindings = new LogPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

