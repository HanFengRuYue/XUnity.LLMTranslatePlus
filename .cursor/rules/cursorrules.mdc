---
alwaysApply: true
---
# XUnity-LLMTranslatePlus 项目文档

## 项目概述

**项目名称**: XUnity大语言模型翻译Plus  
**版本**: 1.0.3  
**框架**: .NET 9.0 + WinUI 3  
**运行模式**: Unpackaged  
**开发语言**: C# 12.0, XAML  

### 项目目的
对接 XUnity.AutoTranslator 插件，使用 AI 大语言模型 API 自动翻译游戏文本。支持主流在线和本地 API 平台（OpenAI、Ollama 等），提供多线程并行翻译、术语库管理、文本编辑等功能。

## 技术栈

### 核心框架
- **.NET 9.0**: 主框架
- **WinUI 3**: 现代化 Windows UI 框架
- **Windows App SDK 1.8**: Windows 应用开发包

### NuGet 包
- `Microsoft.Extensions.DependencyInjection` (9.0.9): 依赖注入
- `CsvHelper` (33.1.0): CSV 文件处理

### 设计模式
- **MVVM 架构**: Model-View-ViewModel 分离
- **依赖注入**: 服务层通过 DI 容器管理
- **事件驱动**: 服务层通过事件通知 UI 更新
- **异步编程**: 所有 I/O 操作使用 async/await

## 项目架构

```
XUnity-LLMTranslatePlus/
├── App.xaml/App.xaml.cs          # 应用入口，DI 容器配置
├── MainWindow.xaml/cs             # 主窗口，NavigationView 导航
├── Models/                        # 数据模型
│   └── AppConfig.cs              # 应用配置、术语、翻译条目、日志模型
├── Services/                      # 业务逻辑服务层
│   ├── ConfigService.cs          # 配置管理（JSON）
│   ├── LogService.cs             # 日志服务
│   ├── TerminologyService.cs     # 术语库管理（CSV）
│   ├── ApiClient.cs              # AI API 客户端
│   ├── TranslationService.cs     # 翻译服务
│   ├── FileMonitorService.cs     # 文件监控服务
│   └── TextEditorService.cs      # 文本编辑服务
├── Utils/                         # 工具类
│   ├── EscapeCharacterHandler.cs # 转义字符处理
│   └── TextFileParser.cs         # 文本文件解析
├── Views/                         # UI 页面
│   ├── HomePage.xaml/cs          # 主页（仪表板）
│   ├── ApiConfigPage.xaml/cs     # API 配置页面
│   ├── TranslationSettingsPage   # 翻译设置页面
│   ├── TextEditorPage.xaml/cs    # 文本编辑器页面
│   └── LogPage.xaml/cs           # 日志监控页面
└── Resources/
    └── Strings.xaml              # 本地化字符串资源
```

## 核心功能模块

### 1. 配置管理 (ConfigService)
- **存储位置**: `%APPDATA%\XUnity-LLMTranslatePlus\config.json`
- **功能**:
  - 读写 JSON 配置文件
  - 首次启动创建默认配置
  - 线程安全的单例访问
- **配置内容**: API 设置、翻译选项、并发配置、系统提示词等

### 2. 日志服务 (LogService)
- **日志级别**: Debug, Info, Warning, Error
- **存储位置**: `%APPDATA%\XUnity-LLMTranslatePlus\logs\log_YYYYMMDD.txt`
- **功能**:
  - 异步写入日志文件
  - 内存缓存最近 1000 条日志
  - 通过事件实时通知 UI
  - 支持日志导出

### 3. 术语库管理 (TerminologyService)
- **存储格式**: CSV 文件
- **存储位置**: `%APPDATA%\XUnity-LLMTranslatePlus\terms.csv`
- **CSV 格式**: `Original,Translation,Priority,Enabled`
- **功能**:
  - CSV 导入/导出
  - 按优先级排序
  - 术语替换应用
  - 构建术语参考字符串

### 4. AI API 客户端 (ApiClient)
- **支持平台**: OpenAI 兼容 API（OpenAI, Ollama, 本地模型）
- **API 格式**: OpenAI Chat Completions API
- **功能**:
  - 可配置超时和重试次数
  - 指数退避重试策略
  - 完整的错误处理和日志
  - 连接测试功能

### 5. 翻译服务 (TranslationService)
- **核心流程**:
  1. 提取转义字符和特殊标记
  2. 构建术语参考
  3. 构建上下文参考
  4. 替换系统提示词变量
  5. 调用 API 翻译
  6. 应用术语库后处理
  7. 还原转义字符
  8. 添加到上下文缓存
- **功能**:
  - 多线程并发翻译（SemaphoreSlim 控制）
  - 上下文缓存（最多 10 条）
  - 统计信息跟踪
  - 进度事件通知

### 6. 转义字符处理 (EscapeCharacterHandler)
- **处理模式**:
  - `\n, \r, \t, \\, \", \'` 等转义符
  - `{0}, {1}, {2}` 等占位符
  - `<color>, <size>` 等 Unity 标签
  - `[item]` 等方括号标记
- **功能**:
  - 提取并生成占位符（`【SPECIAL_N】`）
  - 智能还原（支持占位符位置变化）
  - 统计特殊字符数量

### 7. 文本文件解析 (TextFileParser)
- **目标文件**: `_AutoGeneratedTranslations.txt`
- **文件格式**: 键值对（`key=value`）
- **功能**:
  - 解析键值对
  - 识别未翻译条目（key == value）
  - **检测损坏翻译**（v1.0.3+）：通过 `IsCorruptedTranslation()` 检测 value 缺少转义字符的情况
  - 更新翻译值
  - 保持原文件格式（空行、注释）
  - 统计信息计算
- **重要变更**:
  - v1.0.2+: 已移除自动备份功能，简化文件操作流程
  - v1.0.3+: 移除了错误的 `UnescapeValue()`/`EscapeValue()` 方法，XUnity 文件直接按字面字符读写

### 8. 文件监控服务 (FileMonitorService)
- **监控目标**: `[游戏目录]\BepInEx\Translation\[语言]\Text\_AutoGeneratedTranslations.txt`
- **监控方式**: FileSystemWatcher + 定时处理器
- **处理流程**:
  1. 自动查找翻译文件
  2. 检测文件变化
  3. 解析新增未翻译条目
  4. **检查并清理缓存**（v1.0.3+）：从 `_processedTexts` 缓存中移除未翻译的条目
  5. 加入待处理队列
  6. **验证翻译状态**（v1.0.3+）：使用 `!entry.IsTranslated` 而非简单的字符串比较
  7. 定时批量处理（每 5 秒）
  8. 翻译并更新文件
- **控制**: 手动启动/停止
- **关键改进**（v1.0.3+）：修复了缓存机制和验证逻辑，确保损坏的翻译能被重新处理

### 9. 文本编辑服务 (TextEditorService)
- **功能**:
  - 加载游戏文本文件
  - 搜索和筛选条目
  - 手动编辑单个/批量条目
  - 保存修改到文件
  - 统计信息显示

## UI 页面详解

### HomePage（主页）
- **功能**: 监控控制、实时统计、最近翻译列表
- **控件**:
  - 开始/停止监控按钮
  - 状态信息栏（InfoBar）
  - 统计卡片（已翻译、待处理、错误）
  - 最近翻译列表（ListView）
- **服务依赖**: FileMonitorService, TranslationService, ConfigService

### ApiConfigPage（API 配置）
- **布局**: Expander 折叠面板分组
- **配置项**:
  - **基础配置**: API 平台、地址、密钥、模型
  - **高级配置**: MaxTokens, Temperature, TopP, Penalty, 超时, 重试
  - **并发配置**: 线程数、批处理
  - **系统提示词**: 支持变量 `{目标语言}`, `{原文}`, `{术语}`, `{上下文}`
  - **术语库**: CRUD 操作、CSV 导入导出
- **功能**: 测试连接、保存配置
- **服务依赖**: ConfigService, TerminologyService, ApiClient
- **UI 改进** (v1.0.2+):
  - 模型名称 ComboBox 支持动态加载和显示已保存的配置
  - 术语库表格优化列间距，避免译文和优先级列重叠
  - 使用 DispatcherQueue 延迟加载确保控件完全初始化后显示数据

### TranslationSettingsPage（翻译设置）
- **布局**: Expander 折叠面板分组
- **配置项**:
  - **XUnity 配置**: 游戏目录、自动检测路径
  - **翻译选项**: 目标语言、源语言、实时监控间隔
  - **上下文配置**: 启用、行数、权重
  - **输出配置**: 翻译缓存、日志导出
- **功能**: 浏览游戏目录、自动检测翻译文件路径
- **服务依赖**: ConfigService
- **变更** (v1.0.2+): 移除了"保存原文备份"选项，简化配置界面

### TextEditorPage（文本编辑器）
- **布局**: 双栏布局（列表 + 编辑区）
- **功能**:
  - 自动加载翻译文件（基于游戏目录配置）
  - 实时更新（监控翻译过程中的变化）
  - 搜索和筛选（全部/未翻译/已翻译）
  - 编辑单个条目
  - 保存、撤销、清空、复制原文
  - 单条 AI 翻译功能
  - **导入功能**（v1.0.1+）
    - 支持 CSV/TXT 格式
    - 翻译运行时自动禁用
    - 批量导入翻译条目
    - 自动保存和刷新
  - **导出功能**（v1.0.1+）
    - 导出为 CSV 格式
    - 可选：全部 / 仅已翻译
    - 文件名包含时间戳
- **服务依赖**: TextEditorService, TranslationService, FileMonitorService
- **变更** (v1.0.2+): 移除了"错误"过滤选项，简化过滤逻辑

### LogPage（日志监控）
- **布局**: 工具栏 + 日志列表
- **功能**:
  - 实时显示日志
  - 日志级别筛选（ComboBox）
  - 日志类型过滤（CheckBox：Info, Warning, Error, Debug）
  - 刷新、清空、导出
- **日志格式**: `[时间] [级别] 消息`
- **服务依赖**: LogService
- **状态持久化** (v1.0.2+):
  - 使用静态字段保存复选框状态，跨页面切换保持
  - 添加初始化标志避免加载时状态覆盖
  - 支持任意组合的日志级别过滤
  - 所有复选框状态完全由代码控制，确保一致性

## 文件路径约定

### 配置和数据文件
- **配置文件**: `%APPDATA%\XUnity-LLMTranslatePlus\config.json`
- **术语库**: `%APPDATA%\XUnity-LLMTranslatePlus\terms.csv`
- **日志文件**: `%APPDATA%\XUnity-LLMTranslatePlus\logs\log_YYYYMMDD.txt`

[[calls]]
match = "when the user requests code examples, setup or configuration steps, or library/API documentation"
tool  = "context7"

---

**最后更新**: 2025-10-09 (v1.0.3)